->student Table
CREATE TABLE IF NOT EXISTS `student` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `city` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS `department` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS `course` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NULL,
  `fee` DOUBLE NULL,
  `department_id` INT NOT NULL,
  PRIMARY KEY (`id`, `department_id`) )
ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS  `instructor` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `city` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS `course_instructor` (
  `course_id` INT NOT NULL,
  `instructor_id` INT NOT NULL,
  PRIMARY KEY (`course_id`, `instructor_id`) )
ENGINE = InnoDB;


insert into student(name,city) values

('harry potter','london'),

('ronald weasley','surrey'),

('hermione granger','london');


insert into department(name) values ('backend'),('frontend');


insert into course (name,fee,department_id) values

('java_programming',12000,1),

('reactjs',8000,2),

('mysql',5000,1);


insert into student_course values

(1,1,'2023-01-01'),

(1,2,'2023-01-01'),

(2,2,'2023-01-10'),

(3,1,'2023-01-05'),

(3,2,'2023-01-05');


insert into instructor (name,city) values

('albus dumbledore','hogwards'),

('severus snape','hogwards');


insert into course_instructor values

(1,1),

(2,2),

(1,3),

(2,3);
Q. Display instructor (id,name) teaching course 'reactjs'.
Select i.id,i.name from instructor i,instructor_course ic,course c where i.id=ic.instructor_id and ic.course_id=c.id and c.name=’reactjs’;
Q. Display student names that are being taught by instructor 'albus dumbledore'
Q. Count number of Students Associated with each instructor.

 

Association Rule: If a student is enrolled in say course which is taught by instructor then
student is associated with instructor

select i.name,count(s.id) as no_of_students
     from student s,student_course sc,course c,course_instructor ci,instructor i
     where s.id=sc.student_id
     and sc.course_id=c.id
     and c.id=ci.course_id
     and ci.instructor_id=i.id
     group by i.name
     order by count(s.id);

Select i.id,i.name from instructor i

join course_instructor ci on i.id=ci.instructor_id

join course c on ci.course_id=c.id

where c.name=’reactjs’;


SELECT s.name

FROM student s

JOIN student_course sc ON s.id = sc.student_id

JOIN instructor_course ic ON sc.course_id = ic.course_id

JOIN instructor i ON ic.instructor_id = i.id

WHERE i.name = 'Albus Dumbledore';

select d.name as dept_name,count(s.id) as number_of_students
from student s
join student_course sc on s.id=sc.student_id
join course c on sc.course_id=c.id
join department d on c.department_id=d.id
group by d.name 
having count(s.id)>0
order by count(s.id) desc
limit 10;
